# Packages and libraries:

## altair: 
1. Declarative plotting library using a simple grammar of graphics.
2. Very efficient for generating clean and interactive plots quickly.
3. Integrates well with data in tidy (long-form) format.

## bokeh:
1. Another interactive visualization library.
2. Good for web-based dashboards and interactive reports.
3. Supports streaming and real-time data plotting.

## missingno
1. Specialized in visualizing missing data.
2. Plots include matrix, bar, dendrogram, and heatmaps to understand missingness patterns.

## sweetviz / pandas-profiling
1. Automated EDA tools.
2. Generate full HTML reports summarizing distributions, correlations, missing data, and more.
3. Very useful for a quick overview of the dataset.

# Phase 1: One-Column DataFrames

## For Numerical Data
1. Histogram (matplotlib, seaborn, pandas): Show distribution of values.
2. Box plot (seaborn, plotly): Visualize spread and outliers.
3. KDE Plot (seaborn): Smoothed probability density function.

## Categorical Data
1. Count Plot / Bar Plot (seaborn, plotly): Frequency of each category.
2. Pie Chart (plotly, matplotlib): Proportional distribution (less recommended for complex data).

## Date/Time Data
1. Line Plot (pandas, plotly): Trends over time.
2. Time-binned Histogram (matplotlib, pandas): Temporal distribution.

# Phase 2: Two-Column DataFrames

## Numerical vs Numerical
1. Scatter Plot (seaborn, matplotlib, plotly): Relationship between two variables.
2. Hexbin Plot (matplotlib, seaborn): Density of points in a 2D space.

## Categorical vs Numerical
1. Box Plot (seaborn, plotly): Compare distributions across categories.
2. Violin Plot (seaborn): Show distribution + kernel density.

## Categorical vs Categorical
1. Grouped Bar Plot (seaborn): Compare frequency across categories.
2. Heatmap (frequency) (seaborn, plotly): Co-occurrence matrix.

# Phase 3: Multi-Column DataFrames
1. Pair Plots (seaborn): Grid of scatter plots to see pairwise relationships.
2. Correlation Heatmap (seaborn, plotly): Highlight relationships across all numerical columns.
3. Parallel Coordinates (plotly, pandas.plotting): Compare multiple features simultaneously.
4. Interactive Dashboards (Plotly Dash, Streamlit, Bokeh): Create interactive web apps for advanced data exploration.


# Implimentation:

1. Random Data creation
-> Context: Random dataset created represents gene expression levels (measured as normalized counts, e.g., TPM or FPKM) for a set of genes across tumor and normal samples from a cancer study. It includes metadata such as sample type (tumor vs. normal), patient age, and sample collection date, allowing exploration of numerical, categorical, and datetime data types. Data size is 200 samples.
-> Biological Relevance: Gene expression data is common in cancer research, where differential expression (tumor vs. normal) and correlations between genes or clinical features (e.g., age, stage) are analyzed.

-> Why This Dataset?

1. Covers all data types required for Phase 1: Numerical (gene_expression, patient_age), Categorical (sample_type, tumor_stage), Datetime (collection_date).
2. Enables two-column analyses in Phase 2 (e.g., gene_expression vs. gene_b_expression, sample_type vs. patient_age).
3. Supports multi-column exploration in Phase 3 with correlations, pair plots, and dashboards.
4. Biologically meaningful, aligning with your interest in biological data, and flexible for visualization with matplotlib, seaborn, plotly, etc.

